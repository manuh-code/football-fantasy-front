// Import variables
@import 'variables';

// Responsive design mixins
@mixin breakpoint($size) {
  @if map-has-key($breakpoints, $size) {
    @media (min-width: #{map-get($breakpoints, $size)}) {
      @content;
    }
  }
}

@mixin breakpoint-down($size) {
  @if map-has-key($breakpoints, $size) {
    @media (max-width: #{map-get($breakpoints, $size) - 1px}) {
      @content;
    }
  } @else {
    @media (max-width: #{$size - 1px}) {
      @content;
    }
  }
}

@mixin breakpoint-between($min, $max) {
  $min-value: if(map-has-key($breakpoints, $min), map-get($breakpoints, $min), $min);
  $max-value: if(map-has-key($breakpoints, $max), map-get($breakpoints, $max), $max);
  
  @media (min-width: #{$min-value}) and (max-width: #{$max-value - 1px}) {
    @content;
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: map-get($font-weights, 'medium');
  border-radius: map-get($border-radius, 'md');
  transition: var(--transition-all);
  cursor: pointer;
  border: none;
  text-decoration: none;
  
  &:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@mixin button-size($size: 'md') {
  @if $size == 'sm' {
    padding: map-get($spacing, 'xs') map-get($spacing, 'sm');
    font-size: map-get($font-sizes, 'sm');
    gap: map-get($spacing, 'xs');
  } @else if $size == 'lg' {
    padding: map-get($spacing, 'sm') map-get($spacing, 'lg');
    font-size: map-get($font-sizes, 'lg');
    gap: map-get($spacing, 'sm');
  } @else {
    padding: map-get($spacing, 'xs') map-get($spacing, 'md');
    font-size: map-get($font-sizes, 'base');
    gap: map-get($spacing, 'xs');
  }
}

@mixin button-variant($variant: 'primary') {
  @if $variant == 'primary' {
    background-color: var(--color-primary);
    color: white;
    
    &:hover:not(:disabled) {
      background-color: var(--color-primary-hover);
    }
  } @else if $variant == 'secondary' {
    background-color: var(--color-bg-secondary);
    color: var(--color-text);
    border: 1px solid var(--color-border);
    
    &:hover:not(:disabled) {
      background-color: var(--color-bg-hover);
      border-color: var(--color-border-hover);
    }
  } @else if $variant == 'outline' {
    background-color: transparent;
    color: var(--color-primary);
    border: 1px solid var(--color-primary);
    
    &:hover:not(:disabled) {
      background-color: var(--color-primary);
      color: white;
    }
  } @else if $variant == 'ghost' {
    background-color: transparent;
    color: var(--color-text);
    
    &:hover:not(:disabled) {
      background-color: var(--color-bg-hover);
    }
  }
}

// Card mixins
@mixin card-base {
  background-color: var(--color-bg);
  border: 1px solid var(--color-border);
  border-radius: map-get($border-radius, 'lg');
  box-shadow: var(--shadow-sm);
  transition: var(--transition-all);
}

@mixin card-hover {
  &:hover {
    box-shadow: var(--shadow-md);
    border-color: var(--color-border-hover);
  }
}

// Form input mixins
@mixin input-base {
  width: 100%;
  padding: map-get($spacing, 'sm') map-get($spacing, 'md');
  background-color: var(--color-bg);
  border: 1px solid var(--color-border);
  border-radius: map-get($border-radius, 'md');
  color: var(--color-text);
  font-size: map-get($font-sizes, 'base');
  transition: var(--transition-colors);
  
  &::placeholder {
    color: var(--color-text-muted);
  }
  
  &:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
  }
  
  &:disabled {
    background-color: var(--color-bg-secondary);
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  &.error {
    border-color: var(--color-danger);
    
    &:focus {
      border-color: var(--color-danger);
      box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }
  }
}

// Animation mixins
@mixin fade-in($duration: 0.3s, $delay: 0s) {
  animation: fade-in $duration ease-out $delay;
}

@mixin slide-up($duration: 0.3s, $delay: 0s) {
  animation: slide-up $duration ease-out $delay;
}

@mixin scale-in($duration: 0.2s, $delay: 0s) {
  animation: scale-in $duration ease-out $delay;
}

// Utility mixins
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin aspect-ratio($width, $height) {
  aspect-ratio: #{$width} / #{$height};
}

// Glass morphism effect
@mixin glass-morphism($opacity: 0.1) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

// Dark mode specific styles
@mixin dark-mode {
  .dark & {
    @content;
  }
}

// Loading skeleton
@mixin skeleton {
  background: linear-gradient(90deg, var(--color-bg-secondary) 25%, var(--color-bg-tertiary) 50%, var(--color-bg-secondary) 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}
